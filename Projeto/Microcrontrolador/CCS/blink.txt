//*****************************************************************************
//
// blinky.c - Simple example to blink the on-board LED.
//
// Copyright (c) 2013-2020 Texas Instruments Incorporated.  All rights reserved.
// Software License Agreement
//
// Texas Instruments (TI) is supplying this software for use solely and
// exclusively on TI's microcontroller products. The software is owned by
// TI and/or its suppliers, and is protected under applicable copyright
// laws. You may not combine this software with "viral" open-source
// software in order to form a larger program.
//
// THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
// DAMAGES, FOR ANY REASON WHATSOEVER.
//
// This is part of revision 2.2.0.295 of the EK-TM4C129EXL Firmware Package.
//
//*****************************************************************************

#include <stdint.h>
#include <stdlib.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "driverlib/debug.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/systick.h"
#include "driverlib/interrupt.h"

//*****************************************************************************
//
//! \addtogroup example_list
//! <h1>Blinky (blinky)</h1>
//!
//! A very simple example that blinks the on-board LED using direct register
//! access.
//
//*****************************************************************************

//*****************************************************************************
//
// The error routine that is called if the driver library encounters an error.
//
//*****************************************************************************
#ifdef DEBUG
void
__error__(char *pcFilename, uint32_t ui32Line)
{
    while(1);
}
#endif

uint8_t ui8WarpCount;
uint8_t oneSecFlag;
uint8_t ledValue;
//função de atendimento à interrupção do SysTick
void intSysTick(void){
    /*++ui8WarpCount;
    if(ui8WarpCount == 10){
        ui8WarpCount = 0;
        oneSecFlag = 1;
    }*/
    ledValue = 1 - ledValue;
    GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, ledValue);
}

//configura o SysTick, para ter interrupção a cada clockNumber clocks
void configureSysTick(uint32_t clockNumber, void (*funPtr)(void)){
    SysTickPeriodSet(clockNumber);
    SysTickIntEnable();
    SysTickIntRegister(funPtr);
    SysTickEnable();
}

void configureGPIOs(){
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOH);

    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOH))
    {
    }

    GPIOPinTypeGPIOOutput(GPIO_PORTH_BASE, GPIO_PIN_0);
    GPIOPinTypeGPIOOutput(GPIO_PORTH_BASE, GPIO_PIN_1);


    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOK);

    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOK))
    {
    }

    GPIOPinTypeGPIOOutput(GPIO_PORTK_BASE, GPIO_PIN_6);
    GPIOPinTypeGPIOOutput(GPIO_PORTK_BASE, GPIO_PIN_7);

}


//*****************************************************************************
//
// Blink the on-board LED.
//
//*****************************************************************************
int
main(void)
{
    //volatile uint32_t ui32Loop;

    SysCtlClockFreqSet(SYSCTL_OSC_INT, 16000000);

/*
    //
    // Enable the GPIO port that is used for the on-board LED.
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPION);

    //
    // Check if the peripheral access is enabled.
    //
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPION))
    {
    }

    //
    // Enable the GPIO pin for the LED (PN0).  Set the direction as output, and
    // enable the GPIO pin for digital function.
    //
    GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_0);

    ui8WarpCount = 0;
    oneSecFlag = 0;
    configureSysTick(16000000, intSysTick);
*/
    configureSysTick(16000000, intSysTick);
    while(1);

    /*
    uint8_t ledValue = 0;
    while(1){
        if(oneSecFlag){
            oneSecFlag = 0;
            ledValue = 1 - ledValue;
            GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, ledValue);
        }
    }
    */
    /*
    //
    // Loop forever.
    //
    while(1)
    {
        //
        // Turn on the LED.
        //
        GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, GPIO_PIN_0);

        //
        // Delay for a bit.
        //
        for(ui32Loop = 0; ui32Loop < 200000; ui32Loop++)
        {
        }

        //
        // Turn off the LED.
        //
        GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, 0x0);

        //
        // Delay for a bit.
        //
        for(ui32Loop = 0; ui32Loop < 200000; ui32Loop++)
        {
        }
    }*/
}
